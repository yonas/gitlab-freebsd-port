#!/usr/bin/env bash

GITLAB_USER=%%GITLAB_USER%%
GITLAB_GROUP=%%GITLAB_GROUP%%
GITLAB_BASE=%%GITLAB_BASE%%
GITLAB_DIR=%%GITLAB_DIR%%
FQDN=$(hostname)


######################################################################
# 1. Install bundler gem system-wide:

install_bundler ()
{
    sudo gem install bundler --no-ri --no-rdoc
}


######################################################################
# 2. Add this to /etc/rc.conf:

setup_rc_conf ()
{
    if hash sysrc 2> /dev/null; then
        # Core services
        sysrc sshd_enable="YES"

        # GitLab services
        sysrc redis_enable="YES"
        sysrc postgresql_enable="YES"
        sysrc gitlab_enable="YES"

        # Web server
        sysrc nginx_enable="YES"

        # Postfix/Sendmail
        sysrc postfix_enable="YES"
        sysrc sendmail_enable="NO"
        sysrc sendmail_submit_enable="NO"
        sysrc sendmail_outbound_enable="NO"
        sysrc sendmail_msp_queue_enable="NO"
    else
        cat >> /etc/rc.conf <<EOD
# Core services
sshd_enable="YES"

# GitLab services
redis_enable="YES"
postgresql_enable="YES"
gitlab_enable="YES"

# Web server
nginx_enable="YES"

# Postfix/Sendmail
postfix_enable="YES"
sendmail_enable="NO"
sendmail_submit_enable="NO"
sendmail_outbound_enable="NO"
sendmail_msp_queue_enable="NO"
EOD
    fi
}


######################################################################
# 3. Set up Postgres database

setup_postgres ()
{
    # As root, make sure that Postgres is running:
    sudo service postgresql stop
    sudo killall postgres
    sudo service postgresql start

    # Initialize Postgres db
    sudo -u pgsql initdb /usr/local/pgsql/data

    sudo service postgresql stop
    sudo killall postgres
    sudo service postgresql start

    # Remove database and roles from previous setup
    sudo -u pgsql psql -d template1 -c "DROP DATABASE IF EXISTS gitlabhq_production;"
    sudo -u pgsql psql -d template1 -c "DROP ROLE IF EXISTS ${GITLAB_USER};"

    # Create a user for GitLab
    sudo -u pgsql psql -d template1 -c "CREATE USER ${GITLAB_USER} CREATEDB;"

    # Create the GitLab production database & grant all privileges on database
    #sudo -u pgsql psql -d template1 -c "CREATE DATABASE gitlabhq_production OWNER gitlab encoding='UTF8';"
    sudo -u pgsql psql -d template1 -c "CREATE DATABASE gitlabhq_production OWNER ${GITLAB_USER};"
}


######################################################################
# 4. Set up Redis

setup_redis ()
{
    # Add gitlab user to redis group
    sudo pw user mod ${GITLAB_USER} -G redis

    # Back up the original Redis config file:
    sudo cp /usr/local/etc/redis.conf /usr/local/etc/redis.conf.orig

    # Run the following commands to get Redis working:

    # Disable Redis listening on TCP by setting 'port' to 0
    sudo cp /usr/local/etc/redis.conf.sample /usr/local/etc/redis.conf
    sudo sed -i '' -e 's/^port .*/port 0/' /usr/local/etc/redis.conf

    # Enable Redis socket
    echo 'unixsocket /usr/local/var/run/redis/redis.sock' | sudo tee -a /usr/local/etc/redis.conf

    # Grant permission to the socket to all members of the Redis group
    echo 'unixsocketperm 770' | sudo tee -a /usr/local/etc/redis.conf

    # Create the directory which contains the socket
    sudo mkdir -p /usr/local/var/run/redis
    sudo chown redis:redis /usr/local/var/run/redis
    sudo chmod 755 /usr/local/var/run/redis

    # Restart Redis
    sudo service redis restart
}


######################################################################
# 5. Set up GitLab

setup_gitlab ()
{
    # Go to GitLab source folder
    cd ${GITLAB_DIR}

    # Copy the example GitLab config
    sudo -u ${GITLAB_USER} -H cp config/gitlab.yml.example config/gitlab.yml

    # Edit the GitLab configuration file
    # The option host: should be set to your domain, e.g. "gitlab.mysite.com".
    sudo -u ${GITLAB_USER} -H sed -i '' -e "s/host: localhost/host: ${FQDN}/g" config/gitlab.yml

    # The line bin_path: should be set to FreeBSD's git location: /usr/local/bin/git.
    sudo -u ${GITLAB_USER} -H sed -i '' -e 's/\/usr\/bin\/git/\/usr\/local\/bin\/git/' config/gitlab.yml

    # Every reference to /home/git should be set to %%GITLAB_BASE%%
    sudo -u ${GITLAB_USER} -H sed -i '' -e "s/\/home\/git/${GITLAB_BASE//\//\\/}/g" config/gitlab.yml

    # Change the user from 'git' to '%%GITLAB_USER%%'
    sudo -u ${GITLAB_USER} -H sed -i '' -e "s/# user: git/user: ${GITLAB_USER}/g" config/gitlab.yml

    # As root:
    cd ${GITLAB_DIR}
    sudo chmod -R u+rw .
    sudo chown -R ${GITLAB_USER} log/
    sudo chown -R ${GITLAB_USER} tmp/
    sudo chmod -R u+rwX,go-w log/
    sudo chmod -R u+rwX tmp/

    # Make folder for satellites and set the right permissions
    sudo -u ${GITLAB_USER} -H mkdir ${GITLAB_BASE}/gitlab-satellites
    sudo -u ${GITLAB_USER} -H chmod u+rwx,g=rx,o-rwx ${GITLAB_BASE}/gitlab-satellites

    # Make sure GitLab can write to the tmp/pids/ and tmp/sockets/ directories
    sudo -u ${GITLAB_USER} -H chmod -R u+rwX tmp/pids/
    sudo -u ${GITLAB_USER} -H chmod -R u+rwX tmp/sockets/

    # Make sure GitLab can write to the public/uploads/ directory
    sudo -u ${GITLAB_USER} -H chmod -R u+rwX  public/uploads

    # Copy the example Unicorn config
    sudo -u ${GITLAB_USER} -H cp config/unicorn.rb.example config/unicorn.rb

    # Set the number of workers to at least the number of cores
    sudo -u ${GITLAB_USER} -H cp config/unicorn.rb.example config/unicorn.rb
    sudo -u ${GITLAB_USER} -H sed -i '' -e "s/worker_processes 3/worker_processes $(sysctl -n hw.ncpu)/g" config/unicorn.rb

    # Every reference to /home/git should be set to %%GITLAB_BASE%%
    sudo -u ${GITLAB_USER} -H sed -i '' -e "s/\/home\/git\//${GITLAB_BASE//\//\\/}\//g" config/unicorn.rb

    # Copy the example Rack attack config
    sudo -u ${GITLAB_USER} -H cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb

    # Configure Git global settings for git user, useful when editing via web
    # Edit user.email according to what is set in gitlab.yml
    sudo -u ${GITLAB_USER} -H git config --global user.name "GitLab"
    sudo -u ${GITLAB_USER} -H git config --global user.email "example@example.com"
    sudo -u ${GITLAB_USER} -H git config --global core.autocrlf input

    # Copy Redis connection settings
    sudo -u ${GITLAB_USER} -H cp config/resque.yml.example config/resque.yml

    # Configure Redis to use the modified socket path
    # Change 'production' line to 'unix:/usr/local/var/run/redis/redis.sock'
    sudo -u ${GITLAB_USER} -H cp config/resque.yml.example config/resque.yml
    sudo -u ${GITLAB_USER} -H sed -i '' -e 's/^production: unix:\/var\/run\/redis\/redis.sock/production: unix:\/usr\/local\/var\/run\/redis\/redis.sock/g' config/resque.yml

    # Copy database config
    sudo -u ${GITLAB_USER} -H cp config/database.yml.postgresql config/database.yml

    # Install Ruby Gems
    sudo -u ${GITLAB_USER} -H bundle install --deployment --without development test mysql aws
}


######################################################################
# 6. GitLab Shell

setup_gitlab_shell ()
{
    cd ${GITLAB_DIR}
    # Run the rake task for installing gitlab-shell
    sudo -u ${GITLAB_USER} -H bundle exec rake gitlab:shell:install[v2.6.7] REDIS_URL=unix:/usr/local/var/run/redis/redis.sock RAILS_ENV=production

    # Edit the gitlab-shell config
    cd ${GITLAB_BASE}/gitlab-shell
    # Change the 'socket' option to '/usr/local/var/run/redis/redis.sock'
    sudo -u ${GITLAB_USER} -H sed -i '' -e 's/socket: "\/var\/run\/redis\/redis.sock"/socket: "\/usr\/local\/var\/run\/redis\/redis.sock"/g' config.yml
}


######################################################################
# 7. Install gitlab-workhorse

install_workhorse ()
{
    cd ${GITLAB_BASE}
    sudo -u ${GITLAB_USER} -H git clone https://gitlab.com/gitlab-org/gitlab-workhorse.git
    cd gitlab-workhorse
    sudo -u ${GITLAB_USER} -H git checkout 0.4.2
    sudo -u ${GITLAB_USER} -H make
}


######################################################################
# 8. Initialise Database

initialise_database ()
{
    cd ${GITLAB_DIR}
    # Initialize Database and Activate Advanced Features
    sudo -u ${GITLAB_USER} -H bundle exec rake gitlab:setup RAILS_ENV=production

    # Type 'yes' to create the database tables.
    # When done you see 'Administrator account created:'
    # Note: You can set the Administrator/root password by supplying it in the environmental variable GITLAB_ROOT_PASSWORD as seen below.
    # If you don't set the password (and it is set to the default one) please wait with exposing GitLab to the public internet until the
    # installation is done and you've logged into the server the first time. During the first login you'll be forced to change the default password.
    #sudo -u ${GITLAB_USER} -H bundle exec rake gitlab:setup RAILS_ENV=production GITLAB_ROOT_PASSWORD=yourpassword
}


######################################################################
# 9. Check Configuration

check_configuration ()
{
    cd ${GITLAB_DIR}
    echo "If this all passes (all green and/or no errors are reported), then go ahead and compile all of the assets for GitLab."
    sudo -u ${GITLAB_USER} -H bundle exec rake gitlab:env:info RAILS_ENV=production
}


######################################################################
# 10. Compile Assets

compile_assets ()
{
    cd ${GITLAB_DIR}
    echo "This can take ~10-15 minutes on a smaller machine, so don't panic if it takes a while!"
    sudo -u ${GITLAB_USER} -H bundle exec rake assets:precompile RAILS_ENV=production
}


######################################################################
# 11. Start GitLab service

start_gitlab ()
{
    # If all of the above steps complete with no errors and everything has gone smoothly, then start the GitLab service.
    # Stop any old processes
    sudo -u ${GITLAB_USER} -H service gitlab stop
    # Launch GitLab daemons
    sudo -u ${GITLAB_USER} -H service gitlab start
}


######################################################################
# 12. Configure Nginx

configure_nginx ()
{
    # Note: The default version of nginx on FreeBSD is compiled without the gzip_static module, which means you need to remove the appropriate directives from the Nginx configuration.
    sudo mv /usr/local/etc/nginx/nginx.conf /usr/local/etc/nginx/nginx.conf.orig
    sudo cp /usr/local/share/examples/gitlab/nginx.conf /usr/local/etc/nginx/nginx.conf 
    sudo sed -i '' -e "s/yourserver.yourdomain/${FQDN}/g" /usr/local/etc/nginx/nginx.conf

    echo "Open /usr/local/etc/nginx/nginx.conf and make sure to read the comments in order to properly set up SSL."
}


######################################################################
# 13. Start Nginx

start_nginx ()
{
    # Start Nginx:
    sudo service nginx restart

    echo "
Visit http://${FQDN} in your web browser for your first GitLab login. The setup has created a default admin account for you. You can use it to log in:

username: root
password: 5iveL!fe
"
}

install_bundler
setup_rc_conf
setup_postgres
setup_redis
setup_gitlab
setup_gitlab_shell
install_workhorse
initialise_database
check_configuration
compile_assets
start_gitlab
configure_nginx
start_nginx